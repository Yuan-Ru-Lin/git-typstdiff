#!/usr/bin/env python3
"""
git-typstdiff: Generate a Typst diff between two Git revisions of a .typ file,
with insertions highlighted and deletions struck through.

Usage:
  git-typstdiff <rev1> <rev2> <file.typ> [-o output.typ]

Example:
  git-typstdiff HEAD~1 HEAD paper.typ -o paper-diff.typ
"""
import argparse
import subprocess
import sys
import difflib

def get_file_at_rev(rev: str, path: str) -> list[str]:
    """Retrieve the file content at a given Git revision as a list of lines."""
    proc = subprocess.run([
        "git", "show", f"{rev}:{path}"
    ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    if proc.returncode != 0:
        print(f"Error: could not show {path} at revision {rev}:\n{proc.stderr}", file=sys.stderr)
        sys.exit(1)
    return proc.stdout.splitlines()


def main():
    parser = argparse.ArgumentParser(
        description="Generate a Typst diff between two Git revisions"
    )
    parser.add_argument('rev1', help="First Git revision (e.g. HEAD~1)")
    parser.add_argument('rev2', help="Second Git revision (e.g. HEAD)")
    parser.add_argument('file', help="Path to the .typ Typst file")
    parser.add_argument('-o', '--output', help="Output Typst diff file")
    args = parser.parse_args()

    # Load both versions
    old_lines = get_file_at_rev(args.rev1, args.file)
    new_lines = get_file_at_rev(args.rev2, args.file)

    # Compute line-based diff
    diff = difflib.ndiff(old_lines, new_lines)

    # Prepare output with macros for highlighting
    out = []
    out.append(f"// Generated by git-typstdiff {args.rev1}...{args.rev2} on {args.file}")
    out.append("")
    out.append("#let insert(x) = highlight(fill: green, x)")
    out.append("#let delete(x) = strike(stroke: 1.5pt + red, x)")
    out.append("")

    # Translate diff into Typst markup
    for line in diff:
        if line.startswith('  '):
            out.append(line[2:])
        elif line.startswith('- '):
            out.append(f"#delete({line[2:]})")
        elif line.startswith('+ '):
            out.append(f"#insert({line[2:]})")
        # ignore lines starting with '? '

    result = "\n".join(out)

    if args.output:
        with open(args.output, 'w') as f:
            f.write(result)
        print(f"Diff written to {args.output}")
    else:
        print(result)

if __name__ == '__main__':
    main()

